##
## This is a multi-stage Dockerfile which contains all CI-related operations as well as images to be deployed in production
##

# Ignore package pinning rules
# # npm pinning
# hadolint global ignore=DL3016
# # apk pinning
# hadolint global ignore=DL3018
# # apt pinning
# hadolint global ignore=DL3008

ARG PLAYWRIGHT_VERSION
ARG DOCKER_IMAGE_REGISTRY=public.ecr.aws
FROM $DOCKER_IMAGE_REGISTRY/docker/library/node:18-alpine3.15 as deps

RUN --mount=type=cache,target=/var/cache/apk/ \
  apk add --upgrade --no-cache \
  git python3 build-base gcc bash && \
  ln -sf /usr/bin/python3 /usr/bin/python

WORKDIR /build

# Adding and installing packages
COPY package.json yarn.lock .yarnrc.yml ./
COPY apps/native/app/package.json ./apps/native/app/
COPY .yarn/releases/ .yarn/releases/
COPY .yarn/patches/ .yarn/patches/
RUN ls -lah ./.yarn/ ./
# We,re using --mount, so no need to `yarn cache clean`
# hadolint ignore=DL3060
RUN --mount=type=cache,target=./.yarn/cache --mount=type=cache,target=.cache --mount=type=cache,target=/root/.cache \
  CI=true yarn install --immutable



FROM deps as src

RUN wget -qO /tmp/jq-linux64 https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && \
  chmod a+x /tmp/jq-linux64 && \
  mv /tmp/jq-linux64 /usr/bin/jq

# image with the source code
# COPY *.* ./
COPY *.js *.json *.yaml *.yml *.ts *.lock ./
COPY .*.js .*.json .*.yaml .*.yml .*.ts .*.lock ./
COPY infra/ infra/
COPY libs/ libs/
COPY apps/ apps/



FROM src as builder

ARG APP
ENV APP=${APP}
ARG APP_DIST_HOME=dist/apps/${APP}
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=8192"

RUN id && \
  pwd && \
  ls -lah ./ .yarn ./apps/${APP}
RUN yarn run build ${APP} --prod



FROM $DOCKER_IMAGE_REGISTRY/docker/library/node:18-alpine3.15 as output-base

# this is base image for containers that are to be deployed
ARG GIT_BRANCH
ENV GIT_BRANCH=${GIT_BRANCH}
ARG GIT_SHA
ENV GIT_SHA=${GIT_SHA}
LABEL branch=${GIT_BRANCH}
LABEL commit=${GIT_SHA}
ARG APP
ENV APP=${APP}
ARG APP_HOME
ARG APP_DIST_HOME=dist/apps/${APP}
ENV NODE_ENV=production

WORKDIR /webapp

# Adding user for running the app
RUN addgroup runners && \
  adduser -D runner -G runners



FROM output-base as output-base-with-pg

RUN npm install -g \
  sequelize \
  sequelize-cli \
  pg

USER runner



FROM output-base-with-pg as output-express
ARG GIT_SHA
ENV DD_GIT_COMMIT_SHA="${GIT_SHA}"
ENV DD_GIT_REPOSITORY_URL="github.com/island-is/island.is"

COPY --from=builder /build/${APP_DIST_HOME} /webapp/

ENTRYPOINT []
CMD [ "node", "--no-experimental-fetch", "main.js" ]



FROM output-base-with-pg as output-next
ARG GIT_SHA
ENV DD_GIT_COMMIT_SHA="${GIT_SHA}"
ENV DD_GIT_REPOSITORY_URL="github.com/island-is/island.is"
ENV PORT=4200

# TODO: smallify
COPY --from=deps /build/node_modules /webapp/node_modules
COPY --from=builder /build/${APP_DIST_HOME} /webapp/

ENTRYPOINT [ "node", "--no-experimental-fetch", "main.js" ]



FROM $DOCKER_IMAGE_REGISTRY/nginx/nginx:1.21-alpine as output-static
ARG APP
ENV APP=${APP}
ARG APP_DIST_HOME=dist/apps/${APP}
ARG GIT_BRANCH
ENV GIT_BRANCH=${GIT_BRANCH}
ARG GIT_SHA
ENV GIT_SHA=${GIT_SHA}
LABEL branch=${GIT_BRANCH}
LABEL commit=${GIT_SHA}
ENV BASEPATH=/
ENV DD_GIT_COMMIT_SHA="${GIT_SHA}"
ENV DD_GIT_REPOSITORY_URL="github.com/island-is/island.is"

RUN mkdir -p /etc/nginx/templates
RUN --mount=type=cache,target=/var/cache/apk/ \
  apk add --upgrade --no-cache \
  bash nodejs

COPY scripts/dockerfile-assets/nginx/* /etc/nginx/templates
COPY scripts/dockerfile-assets/bash/extract-environment.sh /docker-entrypoint.d
COPY scripts/dockerfile-assets/bash/extract-environment.js /docker-entrypoint.d
COPY --from=builder /build/${APP_DIST_HOME} /usr/share/nginx/html



FROM output-base as output-jest

RUN echo 'module.exports = {};' > jest.config.js && \
  npm install -g jest

COPY --from=builder /build/${APP_DIST_HOME} /webapp/

USER runner

CMD [ "jest", "main.spec.js" ]



FROM mcr.microsoft.com/playwright:v${PLAYWRIGHT_VERSION}-focal as playwright-base
FROM playwright-base as output-playwright

# TODO: remove awscli dependency (157 MB extra)
RUN --mount=type=cache,target=/apt/foo/bar \
  apt-get update -y && \
  apt-get install -y --no-install-recommends \
  zip awscli && \
  apt-get purge

ARG APP_HOME
ARG APP_DIST_HOME

WORKDIR ${APP_DIST_HOME}


COPY .yarn/releases/ .yarn/releases/
COPY .yarn/patches/ .yarn/patches/
COPY .yarnrc.yml yarn.lock package.json ./
# We,re using --mount, so no need to `yarn cache clean`
# hadolint ignore=DL3060
RUN --mount=type=cache,target=./.yarn/cache --mount=type=cache,target=.cache --mount=type=cache,target=/root/.cache \
  cp yarn.lock yarn.lock.bak && \
  diff yarn.lock.bak yarn.lock && \
  ( yarn install || (cat /tmp/*/*.log && exit 1) )

COPY --from=builder /build/${APP_DIST_HOME} .
COPY package.json package.json

ENV PLAYWRIGHT_BROWSER=chromium
RUN yarn playwright install ${PLAYWRIGHT_BROWSER}

COPY ${APP_HOME}/entrypoint.sh .

RUN chown -R pwuser:pwuser -- src/ *.*
USER pwuser
ENTRYPOINT ["./entrypoint.sh"]



FROM playwright-base as output-local
ARG APP_HOME
WORKDIR /app


# node user exists in the base image
RUN mkdir -p /out && \
  chown node:node /out

COPY --chown=pwuser:pwuser ${APP_HOME}/entrypoint.sh .

USER pwuser

ENTRYPOINT ["./entrypoint.sh"]



FROM output-base as output-native

RUN echo "not-implemented"
