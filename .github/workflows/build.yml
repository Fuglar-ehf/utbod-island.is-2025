name: Monorepo pipeline

on:
  push:
    branches:
      - 'master'
      - 'release/**'
      - 'hotfix/**'
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - master
  workflow_dispatch: {}

env:
  DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/

jobs:
  prepare:
    #runs-on: self-hosted
    runs-on: ubuntu-20.04
    timeout-minutes: 40 #pulling dependencies potentially twice - host OS and docker layer

    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      CHUNK_SIZE: '2'

    outputs:
      GIT_BRANCH: ${{ steps.git_refs.outputs.GIT_BRANCH }}
      DOCKER_TAG: ${{ steps.docker_tags.outputs.DOCKER_TAG }}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ steps.git_nx_base.outputs.LAST_GOOD_BUILD_DOCKER_TAG }}
      PUBLISH: ${{ steps.publish_flag.outputs.PUBLISH }}
      TEST_CHUNKS: ${{ steps.test_projects.outputs.CHUNKS }}
      LINT_CHUNKS: ${{ steps.lint_projects.outputs.CHUNKS }}
      DOCKER_EXPRESS_CHUNKS: ${{ steps.docker_express_projects.outputs.CHUNKS }}
      DOCKER_NEXT_CHUNKS: ${{ steps.docker_next_projects.outputs.CHUNKS }}
      DOCKER_STATIC_CHUNKS: ${{ steps.docker_static_projects.outputs.CHUNKS }}
      UNAFFECTED: ${{ steps.docker_unaffected_projects.outputs.UNAFFECTED }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git refs
        id: git_refs
        run: |
          export GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}"
          if [[ ! -z "$GITHUB_BASE_REF" ]]
          then
           # a PR
           GIT_BASE_BRANCH=$GITHUB_BASE_REF
          else
           # on master
           GIT_BASE_BRANCH=master
          fi
          echo "::set-env name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-output name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-env name=GIT_BASE_BRANCH::${GIT_BASE_BRANCH}"
          echo "Base branch is '${GIT_BASE_BRANCH}'"
          echo "Branch is '${GIT_BRANCH}'"

      - name: Generate docker image tag
        id: docker_tags
        run: |
          export DOCKER_BRANCH_TAG=$(echo ${GIT_BRANCH} | tr "/." "-" )
          export DOCKER_TAG=${GITHUB_RUN_NUMBER}_${DOCKER_BRANCH_TAG}_${GITHUB_SHA:0:7}
          echo "Docker tag will be ${DOCKER_TAG}"
          echo "::set-output name=DOCKER_TAG::${DOCKER_TAG}"
          echo "::set-env name=DOCKER_TAG::${DOCKER_TAG}"

      - run: |
          echo "::set-env name=HEAD::${GITHUB_SHA}"
        id: git_nx_head
        name: Preparing HEAD tag

      - run: |
          source ./scripts/00_prepare-base-tags.sh
          echo "::set-env name=BASE::${BASE}"
          echo "::set-output name=LAST_GOOD_BUILD_DOCKER_TAG::${LAST_GOOD_BUILD_DOCKER_TAG}"
        id: git_nx_base
        name: Preparing BASE tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set publish flag
        id: publish_flag
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            export PUBLISH=false
          else
            export PUBLISH=true
          fi
          echo "::set-output name=PUBLISH::${PUBLISH}"

      - name: Cache for NodeJS dependencies - Docker layer
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-deps

      - name: Cache for NodeJS dependencies - Docker layer
        uses: actions/cache@v2
        with:
          path: cache_output
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-output-base

      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-yarn

      - name: Set up Docker Buildx
        if: steps.cache-deps.outputs.cache-hit != 'true'
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building NodeJS dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: ./scripts/10_prepare-deps.sh

      - name: set BRANCH env var
        run: echo "::set-env name=BRANCH::${GIT_BRANCH}"

      - name: Cache for generated files
        id: generated-files-cache
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ runner.os }}-${{ hashFiles('libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}-generated-files

      - name: Generate schemas
        if: steps.generated-files-cache.outputs.cache-hit != 'true'
        run: tar zcvf generated_files.tar.gz $(./scripts/get-files-touched-by.sh yarn schemas --all | xargs realpath --relative-to $(pwd))

      - name: Security audit Node modules
        run: ./scripts/20_security-audit.sh

      - name: License audit Node modules
        run: ./scripts/20_license-audit.sh

      - name: Prepare lint targets
        id: lint_projects
        run: |
          CHUNK_SIZE=7 source ./scripts/generate-chunks.sh lint
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare test targets
        id: test_projects
        run: |
          source ./scripts/generate-chunks.sh test
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-express targets
        id: docker_express_projects
        run: |
          source ./scripts/generate-chunks.sh docker-express
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-next targets
        id: docker_next_projects
        run: |
          source ./scripts/generate-chunks.sh docker-next
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-static targets
        id: docker_static_projects
        run: |
          source ./scripts/generate-chunks.sh docker-static
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare unaffected docker images
        id: docker_unaffected_projects
        run: |
          source ./scripts/list-unaffected.sh docker-next docker-express docker-static
          echo "::set-output name=UNAFFECTED::$UNAFFECTED"

  tests:
    needs: prepare
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.TEST_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-deps

      - name: Cache for NodeJS dependencies - host OS
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-yarn

      - name: Cache for generated files
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ runner.os }}-${{ hashFiles('libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}-generated-files

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Running tests
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh 30_test
      # - name: Running E2E tests
      #   run: yarn run affected:e2e --base origin/master

  formatting:
    needs: prepare
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
    steps:
      - uses: actions/checkout@v2
      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-yarn
      - name: Check formatting
        run: ./scripts/20_check-formatting.sh

  linting:
    needs: prepare
    runs-on: ubuntu-20.04
    timeout-minutes: 25 # linting has proven to be quite resource intensive
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.LINT_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for NodeJS dependencies - host OS
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-yarn

      - name: Cache for generated files
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ runner.os }}-${{ hashFiles('libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}-generated-files

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Linting
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel-native.sh 20_lint

  docker-express:
    needs: [prepare, tests]
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_EXPRESS_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for generated files
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ runner.os }}-${{ hashFiles('libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}-generated-files

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache_output
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-output-base

      - name: Cache for NodeJS dependencies - Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-deps

      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' && env.PUBLISH == 'true'}}
        run: ./scripts/docker-login-ecr.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh 90_docker-express

  docker-static:
    needs: [prepare, tests]
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_STATIC_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for generated files
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ runner.os }}-${{ hashFiles('libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}-generated-files

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache_output
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-output-base

      - name: Cache for NodeJS dependencies - Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-deps

      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' && env.PUBLISH == 'true'}}
        run: ./scripts/docker-login-ecr.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh 90_docker-static

  docker-next:
    needs: [prepare, tests]
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_NEXT_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for generated files
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ runner.os }}-${{ hashFiles('libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}-generated-files

      - name: Untar generated files
        run: tar zxvf generated_files.tar.gz

      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache_output
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-output-base

      - name: Cache for NodeJS dependencies - Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-docker-deps

      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' && env.PUBLISH == 'true'}}
        run: ./scripts/docker-login-ecr.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh 90_docker-next

  retag-unaffected:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    needs:
      [docker-express, docker-next, docker-static, prepare, linting, formatting]
    env:
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
      UNAFFECTED: ${{ needs.prepare.outputs.UNAFFECTED }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ needs.prepare.outputs.LAST_GOOD_BUILD_DOCKER_TAG}}

    steps:
      - uses: actions/checkout@v2
        if: env.PUBLISH == 'true'
      - name: Retag unaffected Docker images
        if: env.PUBLISH == 'true'
        run: ./scripts/retag-unaffected.sh "$UNAFFECTED"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    runs-on: ubuntu-20.04
    needs: [retag-unaffected, prepare]
    env:
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      matrix:
        service: [islandis, gjafakort, air-discount-scheme]
    outputs:
      TRIGGER_FINISHED: ${{ steps.finished.outputs.TRIGGER_FINISHED }}
    steps:
      - uses: actions/checkout@v2
      - name: Trigger Deployment for service
        if: env.PUBLISH == 'true'
        env:
          SPINNAKER_URL: https://spinnaker-gate.shared.devland.is
          SPINNAKER_WEBHOOK_TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_TOKEN }}
        run: |
          curl -v $SPINNAKER_URL/webhooks/webhook/${{matrix.service}} -H "content-type: application/json" --data-binary @- <<BODY
          {
          "token": "$SPINNAKER_WEBHOOK_TOKEN",
          "branch": "$GIT_BRANCH",
          "parameters": { "docker_tag": "$DOCKER_TAG" }
          }
          BODY
      - id: finished
        run: echo "::set-output name=TRIGGER_FINISHED::yes"

  success:
    runs-on: ubuntu-20.04
    if: always()
    needs: deploy
    env:
      TRIGGER_FINISHED: ${{ needs.deploy.outputs.TRIGGER_FINISHED }}
    steps:
      - name: Check success
        run: '[[ $TRIGGER_FINISHED == "yes" ]] || exit 1'
      - name: Announce success
        run: echo "Build is successful"

  failure-notification:
    runs-on: ubuntu-20.04
    if: failure()
    needs:
      [
        docker-express,
        docker-next,
        docker-static,
        prepare,
        linting,
        formatting,
        deploy,
      ]
    env:
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          icon_emoji: ':broken_heart:'
          fields: repo,message,commit,author,action,eventName,ref,workflow,took # selectable (default: repo,message)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: env.PUBLISH == 'true'
