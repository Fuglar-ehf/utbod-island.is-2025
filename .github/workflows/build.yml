name: Monorepo pipeline

on:
  push:
    branches:
      - 'master'
      - 'release/**'
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [master]

env:
  DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/

jobs:
  prepare:
    #runs-on: self-hosted
    runs-on: ubuntu-latest

    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      CHUNK_SIZE: '2'

    # These outputs are not used right now but are here ready when we go for multiple jobs
    outputs:
      GIT_BRANCH: ${{ steps.git_refs.outputs.GIT_BRANCH }}
      GIT_BASE_BRANCH: ${{ steps.git_refs.outputs.GIT_BASE_BRANCH }}
      DOCKER_TAG: ${{ steps.docker_tags.outputs.DOCKER_TAG }}
      DOCKER_LATEST_TAG: ${{ steps.docker_tags.outputs.DOCKER_LATEST_TAG }}
      DOCKER_BRANCH_TAG: ${{ steps.docker_tags.outputs.DOCKER_BRANCH_TAG }}
      BASE: ${{ steps.git_nx_base.outputs.BASE }}
      HEAD: ${{ steps.git_nx_head.outputs.HEAD }}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ steps.git_nx_base.outputs.LAST_GOOD_BUILD_DOCKER_TAG }}
      PUBLISH: ${{ steps.publish_flag.outputs.PUBLISH }}
      TEST_CHUNKS: ${{ steps.test_projects.outputs.CHUNKS }}
      DOCKER_EXPRESS_CHUNKS: ${{ steps.docker_express_projects.outputs.CHUNKS }}
      DOCKER_NEXT_CHUNKS: ${{ steps.docker_next_projects.outputs.CHUNKS }}
      UNAFFECTED: ${{ steps.docker_unaffected_projects.outputs.UNAFFECTED }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git refs
        id: git_refs
        run: |
          export GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}"
          GIT_BASE_BRANCH=`git log --first-parent --pretty=format:'%d' --decorate=no | grep -v HEAD | grep "\S" | cut -d '/' -f2 | tr -d ' )' | head -n 1`
          GIT_BASE_BRANCH=${GITHUB_BASE_REF:-$GIT_BASE_BRANCH}
          GIT_BASE_BRANCH=${GIT_BASE_BRANCH:-master}
          echo "::set-env name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-output name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-env name=GIT_BASE_BRANCH::${GIT_BASE_BRANCH}"
          echo "::set-output name=GIT_BASE_BRANCH::${GIT_BASE_BRANCH}"
          echo "Base branch is '${GIT_BASE_BRANCH}'"
          echo "Branch is '${GIT_BRANCH}'"

      - name: Generate docker image tag
        id: docker_tags
        run: |
          export DOCKER_BRANCH_TAG=$(echo ${GIT_BRANCH} | tr "/." "-" )
          export DOCKER_TAG=${GITHUB_RUN_NUMBER}_${DOCKER_BRANCH_TAG}_${GITHUB_SHA:0:7}
          echo "Docker tag will be ${DOCKER_TAG}"
          echo "::set-env name=DOCKER_BRANCH_TAG::${DOCKER_BRANCH_TAG}"
          echo "::set-output name=DOCKER_BRANCH_TAG::${DOCKER_BRANCH_TAG}"
          echo "::set-output name=DOCKER_TAG::${DOCKER_TAG}"
          echo "::set-env name=DOCKER_TAG::${DOCKER_TAG}"
          echo "::set-output name=DOCKER_LATEST_TAG::latest_${DOCKER_BRANCH_TAG}"

      - run: git checkout "$GIT_BRANCH"
      - run: git checkout "$GIT_BASE_BRANCH"
      - run: git checkout $GITHUB_SHA
      - run: |
          echo "::set-env name=HEAD::${GITHUB_SHA}"
          echo "::set-output name=HEAD::${GITHUB_SHA}"
        id: git_nx_head
        name: Preparing HEAD tag
      - run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            export BRANCH=$GIT_BASE_BRANCH
          else
            export BRANCH=$GIT_BRANCH
          fi
          NUMBER_NEWER_COMMITS_THEN_ME=`git log --format=%H --first-parent "$BRANCH"  $GITHUB_SHA... $BRANCH | wc -l | tr -d '[:space:]'`
          LAST_GOOD_BUILD=`git log --format=%H --first-parent "$BRANCH" | tail -n +$((NUMBER_NEWER_COMMITS_THEN_ME+1)) | node .github/actions/dist/index.js`
          LAST_GOOD_BUILD_SHA=`echo $LAST_GOOD_BUILD | jq -r '.sha'`
          LAST_GOOD_BUILD_BRANCH=`echo $LAST_GOOD_BUILD | jq -r '.branch'`
          LAST_GOOD_BUILD_RUN_NUMBER=`echo $LAST_GOOD_BUILD | jq -r '.run_number'`
          echo "Last successful build on $BRANCH is with SHA '$LAST_GOOD_BUILD_SHA', branch '$LAST_GOOD_BUILD_BRANCH' and number '$LAST_GOOD_BUILD_RUN_NUMBER'"
          echo "::set-env name=BASE::$LAST_GOOD_BUILD_SHA"
          echo "::set-output name=BASE::$LAST_GOOD_BUILD_SHA"
          LAST_GOOD_BUILD_DOCKER_BRANCH_TAG=$(echo ${LAST_GOOD_BUILD_BRANCH} | tr "/." "-" )
          export LAST_GOOD_BUILD_DOCKER_TAG=${LAST_GOOD_BUILD_RUN_NUMBER}_${LAST_GOOD_BUILD_DOCKER_BRANCH_TAG}_${LAST_GOOD_BUILD_SHA:0:7}
          echo "Last successful docker tag '$LAST_GOOD_BUILD_DOCKER_TAG'"
          echo "::set-env name=LAST_GOOD_BUILD_DOCKER_TAG::${LAST_GOOD_BUILD_DOCKER_TAG}"
          echo "::set-output name=LAST_GOOD_BUILD_DOCKER_TAG::${LAST_GOOD_BUILD_DOCKER_TAG}"

        id: git_nx_base
        name: Preparing BASE tags

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ env.GIT_BASE_BRANCH }}
      - name: GitHub envs
        run: env | grep GITHUB

      - name: Set publish flag
        id: publish_flag
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            export PUBLISH=false
          else
            export PUBLISH=true
          fi
          echo "::set-env name=PUBLISH::${PUBLISH}"
          echo "::set-output name=PUBLISH::${PUBLISH}"

      - name: Cache for dependencies Docker layer
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: ./scripts/prepare_deps.sh

      - name: set BRANCH env var
        run: echo "::set-env name=BRANCH::${GIT_BRANCH}"

      - name: Check formatting
        run: ./scripts/check_formatting.sh

      - name: Linting
        run: ./scripts/run-affected-in-parallel-native.sh lint

      # - name: Security audit Node modules
      #   run: ./scripts/security-audit.sh

      - name: Prepare test targets
        id: test_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh test`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-express targets
        id: docker_express_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh docker-express`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare docker-next targets
        id: docker_next_projects
        run: |
          PROJECTS=`./scripts/_nx-affected-targets.sh docker-next`
          echo "Projects: ${PROJECTS}"
          CHUNKS=`node scripts/_chunk.js "${PROJECTS}"`
          echo "Chunks: $CHUNKS"
          echo "::set-output name=CHUNKS::{\"projects\":$CHUNKS}"

      - name: Prepare unaffected docker images
        id: docker_unaffected_projects
        run: |
          UNAFFECTED=`./scripts/list-unaffected.sh docker-next docker-express`
          echo "Unaffected Docker images: ${UNAFFECTED}"
          echo "::set-output name=UNAFFECTED::$UNAFFECTED"

  tests:
    services:
      postgres:
        image: postgres:11.6
        env:
          POSTGRES_DB: application_test
          POSTGRES_PASSWORD: application_test
          POSTGRES_USER: application_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    needs: prepare
    runs-on: ubuntu-latest
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      # TODO: make this more generic (workflows should trigger these services)
      APPLICATION_TEST_DB_USER: application_test
      APPLICATION_TEST_DB_PASS: application_test
      APPLICATION_TEST_DB_NAME: application_test
      APPLICATION_DB_HOST: localhost
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.TEST_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}

      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Running tests
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh test
      # - name: Running E2E tests
      #   run: yarn run affected:e2e --base origin/master

  docker-express:
    needs: [prepare, tests]
    runs-on: ubuntu-latest
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_EXPRESS_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}
      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' }}
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh docker-express

  docker-next:
    needs: [prepare, tests]
    runs-on: ubuntu-latest
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.DOCKER_NEXT_CHUNKS) }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.projects != 'dummy' }}
      - name: Cache for dependencies Docker layer
        if: ${{ matrix.projects != 'dummy' }}
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3
      - name: Set up Docker Buildx
        if: ${{ matrix.projects != 'dummy' }}
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest
      - name: Docker login to ECR repo
        if: ${{ matrix.projects != 'dummy' }}
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Building Docker images
        if: ${{ matrix.projects != 'dummy' }}
        run: ./scripts/run-in-parallel.sh docker-express

  publish:
    runs-on: ubuntu-latest
    needs: [docker-express, docker-next, prepare]
    env:
      GIT_BRANCH: ${{ needs.prepare.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ needs.prepare.outputs.LAST_GOOD_BUILD_DOCKER_TAG}}
      PUBLISH: ${{ needs.prepare.outputs.PUBLISH}}
      UNAFFECTED: ${{ needs.prepare.outputs.UNAFFECTED }}

    steps:
      - uses: actions/checkout@v2
      - name: Set Helm chart version
        id: helm-chart-version
        run: |
          export HELM_CHART_VERSION=1.0.0+${DOCKER_TAG}
          echo "Helm chart version will be ${HELM_CHART_VERSION}"
          echo "::set-env name=HELM_CHART_VERSION::${HELM_CHART_VERSION}"
      - name: Install Helm push plugin
        if: env.PUBLISH == 'true'
        run: helm plugin install https://github.com/chartmuseum/helm-push.git --version=0.8.1
      - name: Install Our ChartMuseum
        if: env.PUBLISH == 'true'
        run: helm repo add chartmuseum https://chartmuseum.shared.devland.is --username=$USERNAME --password=$PASSWORD
        env:
          USERNAME: ${{ secrets.HELM_CHART_USERNAME }}
          PASSWORD: ${{ secrets.HELM_CHART_PASSWORD }}
      - name: Push islandis chart to the museum
        if: env.PUBLISH == 'true'
        run: helm push helm/islandis --version="$HELM_CHART_VERSION" -f chartmuseum
      - name: Push gjafakort chart to the museum
        if: env.PUBLISH == 'true'
        run: helm push helm/gjafakort --version="$HELM_CHART_VERSION" -f chartmuseum
      - name: Push air-discount-scheme chart to the museum
        if: env.PUBLISH == 'true'
        run: helm dep build helm/air-discount-scheme && helm push helm/air-discount-scheme --version="$HELM_CHART_VERSION" -f chartmuseum
      - name: Retag unaffected Docker images
        if: env.PUBLISH == 'true'
        run: ./scripts/retag-unaffected.sh "$UNAFFECTED"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Trigger Deployment for islandis
        if: env.PUBLISH == 'true'
        env:
          TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_ISLANDIS_TOKEN }}
          ENDPOINT: https://spinnaker-gate.shared.devland.is/webhooks/webhook/islandis
        run: |
          curl -v $ENDPOINT -X POST -H "content-type: application/json" --data-binary @- <<BODY
          {
            "token": "$TOKEN",
            "branch": "$GIT_BRANCH",
            "parameters": { "docker_tag": "$DOCKER_TAG" },
            "artifacts": [
              {
                "type": "github/file",
                "name": "https://api.github.com/repos/island-is/island.is/contents/helm/islandis/values.dev.yaml",
                "reference": "https://api.github.com/repos/island-is/island.is/contents/helm/islandis/values.dev.yaml",
                "version": "$GITHUB_SHA"
              },
              {
                "type": "github/file",
                "name": "https://api.github.com/repos/island-is/island.is/contents/helm/islandis/values.prod.yaml",
                "reference": "https://api.github.com/repos/island-is/island.is/contents/helm/islandis/values.prod.yaml",
                "version": "$GITHUB_SHA"
              },
              {
                "name": "islandis",
                "type": "helm/chart",
                "version": "$HELM_CHART_VERSION"
              }
            ]
          }
          BODY
      - name: Trigger Deployment for gjafakort
        if: env.PUBLISH == 'true'
        env:
          TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_GJAFAKORT_TOKEN }}
          ENDPOINT: https://spinnaker-gate.shared.devland.is/webhooks/webhook/gjafakort
        run: |
          curl -v $ENDPOINT -X POST -H "content-type: application/json" --data-binary @- <<BODY
          {
            "token": "$TOKEN",
            "branch": "$GIT_BRANCH",
            "parameters": { "docker_tag": "$DOCKER_TAG" },
            "artifacts": [
              {
                "type": "github/file",
                "name": "https://api.github.com/repos/island-is/island.is/contents/helm/gjafakort/values.dev.yaml",
                "reference": "https://api.github.com/repos/island-is/island.is/contents/helm/gjafakort/values.dev.yaml",
                "version": "$GITHUB_SHA"
              },
              {
                "type": "github/file",
                "name": "https://api.github.com/repos/island-is/island.is/contents/helm/gjafakort/values.prod.yaml",
                "reference": "https://api.github.com/repos/island-is/island.is/contents/helm/gjafakort/values.prod.yaml",
                "version": "$GITHUB_SHA"
              },
              {
                "name": "gjafakort",
                "type": "helm/chart",
                "version": "$HELM_CHART_VERSION"
              }
            ]
          }
          BODY
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: failure() && env.PUBLISH == 'true'
