name: Monorepo pipeline

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [master]

env:
  DOCKER_REGISTRY: 553296336529.dkr.ecr.eu-west-1.amazonaws.com/

jobs:
  test-build:
    #runs-on: self-hosted
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.6
        env:
          POSTGRES_DB: application_test
          POSTGRES_PASSWORD: application_test
          POSTGRES_USER: application_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # TODO: make this more generic (workflows should trigger these services)
      APPLICATION_TEST_DB_USER: application_test
      APPLICATION_TEST_DB_PASS: application_test
      APPLICATION_TEST_DB_NAME: application_test
      APPLICATION_DB_HOST: localhost

    # These outputs are not used right now but are here ready when we go for multiple jobs
    outputs:
      GIT_BRANCH: ${{ steps.docker_tags.outputs.GIT_BRANCH }}
      DOCKER_TAG: ${{ steps.docker_tags.outputs.DOCKER_TAG }}
      DOCKER_LATEST_TAG: ${{ steps.docker_tags.outputs.DOCKER_LATEST_TAG }}
      DOCKER_BRANCH_TAG: ${{ steps.docker_tags.outputs.DOCKER_BRANCH_TAG }}
    steps:
      - uses: actions/checkout@v1

      - name: Set docker image tag
        id: docker_tags
        run: |
          export GIT_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}
          export DOCKER_BRANCH_TAG=$(echo ${GIT_BRANCH} | tr "/." "-" )
          export DOCKER_TAG=${GITHUB_RUN_NUMBER}_${DOCKER_BRANCH_TAG}_${GITHUB_SHA:0:7}
          echo "Docker tag will be ${DOCKER_TAG}"
          echo "::set-output name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-env name=GIT_BRANCH::${GIT_BRANCH}"
          echo "::set-env name=DOCKER_BRANCH_TAG::${DOCKER_BRANCH_TAG}"
          echo "::set-output name=DOCKER_BRANCH_TAG::${DOCKER_BRANCH_TAG}"
          echo "::set-output name=DOCKER_TAG::${DOCKER_TAG}"
          echo "::set-env name=DOCKER_TAG::${DOCKER_TAG}"
          echo "::set-output name=DOCKER_LATEST_TAG::latest_${DOCKER_BRANCH_TAG}"

      - name: Set NX base SHA
        run: |
          if [[ $GITHUB_BASE_REF ]]
          then
            export NX_BASE=$(git merge-base $GITHUB_SHA origin/${GITHUB_BASE_REF})
          else
            export NX_BASE=$(git rev-parse HEAD~1)
          fi
          echo "::set-env name=NX_BASE::${NX_BASE}"
          echo "::set-env name=BASE::${NX_BASE}"
          echo "::set-env name=HEAD::${GITHUB_SHA}"
          echo "Base => $NX_BASE"

      - name: Cache for dependencies Docker layer
        id: cache-deps
        uses: actions/cache@v1
        with:
          path: cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('package.json') }}-3

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: BRANCH=$DOCKER_BRANCH_TAG ./scripts/prepare_deps.sh

      - name: Check formatting
        run: BRANCH=$DOCKER_BRANCH_TAG ./scripts/check_formatting.sh

      # Commenting this out since we do have a package that is problematic and that would block the pipeline
      # - name: Security audit Node modules
      #   run: BRANCH=$DOCKER_BRANCH_TAG ./scripts/security-audit.sh

      - name: Running tests
        run: BRANCH=$DOCKER_BRANCH_TAG ./scripts/run-affected-in-parallel.sh test

      - name: Linting
        run: BRANCH=$DOCKER_BRANCH_TAG ./scripts/run-affected-in-parallel.sh lint

      - name: Docker login to ECR repo
        # if: github.base_ref == null # run this only on master
        run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Building Express apps
        # if: github.base_ref == null # run this only on master
        run: BRANCH=$DOCKER_BRANCH_TAG MAX_JOBS=2 ./scripts/run-affected-in-parallel.sh docker-express
      - name: Building Next.js apps
        # if: github.base_ref == null # run this only on master
        run: BRANCH=$DOCKER_BRANCH_TAG MAX_JOBS=2 ./scripts/run-affected-in-parallel.sh docker-next

      # - name: Running E2E tests
      #   run: yarn run affected:e2e --base origin/master
