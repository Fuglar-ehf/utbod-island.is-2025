name: Monorepo pipeline - pull request

on:
  pull_request: {}
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

concurrency:
  # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
  group: pullrequest-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMPOSE_HTTP_TIMEOUT: 180
  SKIP_GENERATED_CACHE: ${{ contains(github.event.pull_request.labels.*.name, 'skip-generated-cache') }}
  NX_AFFECTED_ALL: ${{ contains(github.event.pull_request.labels.*.name, 'nx-affected-all') }}
  NX_VERBOSE_LOGGING: 'true'

  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  DISABLE_CHUNKS: 'true'
  DISABLE_GROUPING: 'false'
  DISABLE_PROBLEMATIC: 'false'
  CHUNK_SIZE: '8'
  MAX_JOBS: '3'
  NX_PARALLEL: '2'
  NX_MAX_PARALLEL: '4'
  NX_TASKS_RUNNER: ci
  S3_DOCKER_CACHE_BUCKET: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
  RUNS_ON_S3_BUCKET_CACHE: ${{ secrets.S3_DOCKER_CACHE_BUCKET }}
  YARN_ENABLE_HARDENED_MODE: '0'
  AWS_REGION: eu-west-1
  GENERATED_FILES: ${{ github.sha }}.tar.gz
  CYPRESS_CACHE_FOLDER: ${{ github.workspace }}/.cache/Cypress

jobs:
  prepare:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: arc-docker
    timeout-minutes: 35

    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      SERVERSIDE_FEATURES_ON: ''
      DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com
      DOCKER_BASE_IMAGE_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/ecr-public
      CI_DEBUG: ${{ contains(github.event.pull_request.labels.*.name, 'ci debug') }}
      SKIP_TESTS: ${{ contains(github.event.pull_request.labels.*.name, 'test nothing') }}

    outputs:
      SHOULD_RUN_NX: ${{steps.prepare-nx.outputs.SHOULD_RUN_NX}}
      NX_RUN_ALL: ${{steps.prepare-nx.outputs.NX_RUN_ALL}}
      NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: ${{steps.prepare-nx.outputs.NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT}}
      NX_RUNNERS: ${{ steps.prepare-nx.outputs.NX_RUNNERS }}
      NX_ASSIGNMENT_RULES: ${{ steps.prepare-nx.outputs.NX_ASSIGNMENT_RULES }}
      NX_TARGETS: ${{ steps.prepare-nx.outputs.NX_TARGETS }}
      NX_BASE: ${{ steps.prepare-nx.outputs.NX_BASE }}
      NX_HEAD: ${{ steps.prepare-nx.outputs.NX_HEAD }}
      DEPLOY_FEATURE: ${{ contains(github.event.pull_request.labels.*.name, 'deploy-feature') }}
      YARN_CACHE_FOLDER: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      CACHE_KEY: ${{ steps.set-cache-key.outputs.CACHE_KEY }}

    steps:
      # Creates homedir if missing (e.g. when set to /tmp/runner/ when running locally with act)
      - name: Debug home etc.
        if: ${{ github.event.localrun }}
        run: |
          echo "docker version: $(docker --version)"
          echo "User: HOME=$HOME, PWD=$PWD, id=$(id)"
          mkdir -p "$HOME"
          ls -lah "$HOME"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: |
          corepack enable

      - name: Check node version
        run: |
          set -euo pipefail
          node -v
          yarn --version
          ls -l "$(which node)"

      - name: Set cache key
        id: set-cache-key
        run: |
          echo "CACHE_KEY=${{ runner.os }}-deps-cypress-${{ hashFiles('yarn.lock') }}-1" >> $GITHUB_OUTPUT

      - name: Restore Dependencies Cache
        uses: runs-on/cache/restore@v4
        id: restore-cache
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: cc2-${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            cc2-${{ runner.os }}-node_modules
            cc2-${{ runner.os }}-

      - run: |
          yarn install --immutable

      - name: Cache Dependencies
        uses: runs-on/cache/save@v4
        if: steps.restore-cache.outputs.cache-hit != 'true'
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: cc2-${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
          
      - name: Prepare generated files
        run: |
          echo "generated files: ${{ env.GENERATED_FILES }}"
          node ./scripts/ci/generate-files.mjs ${{ env.GENERATED_FILES }}
          tar -xzvf ${{ env.GENERATED_FILES }}

      - name: Cache Generated files
        uses: runs-on/cache/save@v4
        with:
          path: |
            ${{ env.GENERATED_FILES }}
          key: generated-files-${{ github.sha }}

      - name: Derive appropriate SHAs
        uses: nrwl/nx-set-shas@v4

      - run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

      - name: Checking out relevant branches
        id: export-sha
        run: |
          set -euo pipefail
          echo "CHUNK_SIZE: $CHUNK_SIZE"
          echo "MAX_JOBS: $MAX_JOBS"
          echo "NX_PARALLEL: $NX_PARALLEL"
          set -x

          git config --global user.email "ci@island.is"
          git config --global user.name "CI Bot"

          BASE_SHA=${{ env.NX_BASE }}
          HEAD_SHA=${{ env.NX_HEAD }}
          echo "BASE=$BASE_SHA" >> "$GITHUB_ENV"
          echo "NX_BASE=$BASE_SHA" >> "$GITHUB_OUTPUT"
          echo "NX_HEAD=$HEAD_SHA" >> "$GITHUB_OUTPUT"
          echo "Current base SHA is '$BASE_SHA' and head SHA is '$HEAD_SHA'"
          echo "{\"base_sha\": \"$BASE_SHA\", \"head_sha\":\"$HEAD_SHA\"}" > event.json

      # This is to increase the retention days for our GitHub Actions run events
      # See this for more information:
      # https://github.blog/changelog/2020-10-08-github-actions-ability-to-change-retention-days-for-artifacts-and-logs/
      - name: Keep PR run event
        uses: actions/upload-artifact@b18b1d32f3f31abcdc29dee3f2484801fe7822f4
        # Don't run this step locally
        if: ${{ !github.event.localrun }}
        with:
          name: pr-event
          path: event.json
          retention-days: 90
          include-hidden-files: true
          if-no-files-found: error

      - name: License audit Node modules
        run: ./scripts/ci/20_license-audit.sh

      - name: Check user permissions
        uses: actions-cool/check-user-permission@v2
        id: check-permission
        # This fails locally without a token, and only prevents "admin" label usage
        if: ${{ !github.event.localrun }}

      - name: Set magic env if test-everything label is set
        if: ${{ contains(github.event.pull_request.labels.*.name, 'test everything') && steps.check-permission.outcome == 'success' && steps.check-permission.outputs['user-permission'] == 'admin' }}
        run: |
          echo "AFFECTED_ALL=7913-$GITHUB_HEAD_REF" >> "$GITHUB_ENV"

      - name: Warn if user does not have the required permissions
        if: ${{ contains(github.event.pull_request.labels.*.name, 'test everything') && steps.check-permission.outcome == 'success'&& steps.check-permission.outputs['user-permission'] != 'admin' }}
        run: |
          echo "## WARN permissions" >> "$GITHUB_STEP_SUMMARY"
          echo "User '$GITHUB_ACTOR' does not have the required permissions to apply the 'test everything' label" >> "$GITHUB_STEP_SUMMARY"
      - name: Formatting
        id: format-and-linter
        uses: ./.github/actions/format-and-linter
        with:
          push-changes: 'true'
      - name: Check release-manager approval
        id: check-release-manager-approval
        if: ${{ contains(github.event.pull_request.head.ref, '/pre-release/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          node -r esbuild-register .github/actions/check-team-approval.ts release-managers
      - name: Prepare nx
        id: prepare-nx
        run: |
          node scripts/ci/_create_agents.mjs
  nx-base:
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.DEPLOY_FEATURE != 'true' }}
    runs-on: arc-docker
    env:
      should-run: ${{ needs.prepare.outputs.SHOULD_RUN_NX }}
      runners: ${{ needs.prepare.outputs.NX_RUNNERS }}
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
      NX_HEAD: ${{ needs.prepare.outputs.NX_HEAD }}
      NX_TARGETS: ${{ needs.prepare.outputs.NX_TARGETS }}
      NX_RUN_ALL: ${{ needs.prepare.outputs.NX_RUN_ALL }} 
    steps:
      - name: Nothing to do?
        if: ${{ env.should-run == 'false' }}
        run: echo "Nothing to do" && exit 0
      - uses: actions/checkout@v4
        if: ${{ env.should-run == 'true' }}
        with:
          fetch-depth: 0

      - if: ${{ env.should-run == 'true' }}
        run: |
          corepack enable

      - name: Restore Dependencies Cache
        if: ${{ env.should-run == 'true' }}
        uses: runs-on/cache/restore@v4
        id: restore-cache
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: cc2-${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
      - if: ${{ env.should-run == 'true' }}
        run: |
          yarn install --immutable
      - name: Restore generated files
        uses: runs-on/cache/restore@v4
        id: restore-generated-files-cache
        with:
          path: |
            ${{ env.GENERATED_FILES }}
          key: generated-files-${{ github.sha }}
      - name: Extract generated files
        run: |
          tar -xzvf ${{ env.GENERATED_FILES }}
      - name: Start NX 
        if: ${{ env.should-run == 'true' }}
        run: |
            echo "Runners: $runners"
            yarn nx-cloud start-ci-run --distribute-on="manual" --stop-agents-after=${{ env.NX_TARGETS }} --stop-agents-on-failure=true
            
            if [[ "$NX_TARGETS" == *test* ]]; then
              HAS_TEST=true
            else
              HAS_TEST=false
            fi

            NX_TARGETS=${NX_TARGETS//,test/}
            NX_TARGETS=${NX_TARGETS//test,/}
            echo HAS TEST $HAS_TEST
            echo NX_TARGETS $NX_TARGETS
            # Run NX
            if [ "${{ env.NX_RUN_ALL }}" == "true" ]; then
              yarn nx run-many --target="$NX_TARGETS" --all
              if [ "$HAS_TEST" == "true" ]; then
                yarn nx run-many --target=test --all --no-watchman --ci --detectLeaks=false --passWithNoTests --verbose --parallel=1
              fi
            else
              yarn nx affected --target="$NX_TARGETS" --base="${{ env.NX_BASE }}" --head="${{ env.NX_HEAD }}"
              if [ "$HAS_TEST" == "true" ]; then
                yarn nx affected --target=test --base="${{ env.NX_BASE }}" --head="${{ env.NX_HEAD }}" --no-watchman --ci --detectLeaks=false --passWithNoTests --verbose --parallel=1
              fi
            fi
  nx-runners:
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.DEPLOY_FEATURE != 'true' }}
    runs-on: arc-docker
    env:
      should-run: ${{ needs.prepare.outputs.SHOULD_RUN_NX }}
      NX_BASE: ${{ needs.prepare.outputs.NX_BASE }}
      NX_HEAD: ${{ needs.prepare.outputs.NX_HEAD }}
      NX_AGENT_FULL_NAME: ${{ matrix.agents }}
      dd-api-key: 
      codecov-token: ${{ secrets.CODECOV_TOKEN }}
      DD_API_KEY: '${{ secrets.DD_API_KEY }}'
    strategy:
      matrix:
        agents: ${{ fromJson(needs.prepare.outputs.NX_RUNNERS) }}
    steps:
      - name: Set Codeconv version numner
        run: |
          echo "CODECOV_REV=v0.3.2" >> $GITHUB_ENV
      - name: Set agent name
        run: |
          NX_AGENT_LAUNCH_TEMPLATE="${NX_AGENT_FULL_NAME%-*}"
          NX_AGENT_NAME="${NX_AGENT_FULL_NAME##*-}"
          echo "NX_AGENT_LAUNCH_TEMPLATE=\"$NX_AGENT_LAUNCH_TEMPLATE\"" >> $GITHUB_ENV
          echo "NX_AGENT_NAME=\"$NX_AGENT_NAME\"" >> $GITHUB_ENV
          echo "Running ${NX_AGENT_NAME} on ${NX_AGENT_LAUNCH_TEMPLATE}"
      - uses: actions/checkout@v4
        if: ${{ env.should-run == 'true' }}
        with:
          fetch-depth: 0

      - if: ${{ env.should-run == 'true' }}
        run: |
          corepack enable
      - name: Docker login to ECR repo
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/
        run: ./scripts/ci/docker-login-ecr.sh

      - name: Get Yarn Cache Directory Path
        id: yarn-cache-dir-path
        if: ${{ env.should-run == 'true' }}
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore Dependencies Cache
        uses: runs-on/cache/restore@v4
        if: ${{ env.should-run == 'true' }}
        id: restore-cache
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: cc2-${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}
      - if: ${{ env.should-run == 'true' }}
        run: |
          yarn install --immutable
      - name: Restore generated files
        uses: runs-on/cache/restore@v4
        id: restore-generated-files-cache
        with:
          path: |
            ${{ env.GENERATED_FILES }}
          key: generated-files-${{ github.sha }}
      - name: Extract generated files
        run: |
          tar -xzvf ${{ env.GENERATED_FILES }}
      - name: "Running agent"
        if: ${{ env.should-run == 'true' }}
        run: |
          echo "Running on agent ${{ matrix.agents }}"
          echo "Running on agent ${{ env.NX_AGENT_NAME }}"
          echo "Running on agent ${{ env.NX_AGENT_LAUNCH_TEMPLATE }}"
          yarn nx-cloud start-agent
          
  linting-workspace:
    needs:
      - prepare
    runs-on: arc-docker
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - run: |
          corepack enable

      - name: Get Yarn Cache Directory Path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore Dependencies Cache
        uses: runs-on/cache/restore@v4
        id: restore-cache
        with:
          path: |
            ${{ needs.prepare.outputs.YARN_CACHE_FOLDER }}
            ${{ env.CYPRESS_CACHE_FOLDER }}
          key: ${{ needs.prepare.outputs.CACHE_KEY }}

      - run: |
          yarn install --immutable

      - name: Restore generated files
        uses: runs-on/cache/restore@v4
        id: restore-generated-files-cache
        with:
          path: |
            ${{ env.GENERATED_FILES }}
          key: generated-files-${{ github.sha }}

      - name: Extract generated files
        run: |
          tar -xzvf ${{ env.GENERATED_FILES }}

      - name: Linting workspace
        run: ./scripts/ci/20_lint-workspace.sh

  run-shellcheck:
    needs:
      - prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          fail-level: info
          exclude: >-

  success:
    runs-on: arc-docker
    if: ${{ !cancelled() }}
    needs:
      - prepare
      - linting-workspace
      - nx-base
      - run-shellcheck
    steps:
      - name: Check if push workflow run was successful
        run: |
         ${{ github.event.workflow_run.conclusion == 'success' }} || (echo "Push build needs to be succesful" && exit 1)
      - name: Check prepare success
        run: '[[ ${{ needs.prepare.result }} == "success" ]] || exit 1'
      - name: Check linting-workspace success
        run: '[[ ${{ needs.linting-workspace.result }} != "failure" ]] || exit 1'
      - name: Check if deploy-feature is enabled
        run: |
          if [ "$DEPLOY_FEATURE" == "true" ]; then
            echo "::error::The deploy-feature flag is currently enabled, remove it before merge."
            exit 1
          else
            echo "::notice::Deploy-feature flag is not enabled. Proceeding with the workflow."
          fi
      - name: Check NX success
        run: '[[ ${{ needs.nx-base.result }} != "failure" ]] || exit 1'
      - name: Check run-shellcheck success
        run: '[[ ${{ needs.run-shellcheck.result }} != "failure" ]] || exit 1'
      - name: Announce success
        run: echo "Build is successful"
