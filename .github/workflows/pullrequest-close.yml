name: PR close

on:
  pull_request:
    types:
      - closed

defaults:
  run:
    shell: bash

jobs:
  check-unicorn:
    name: Is this a unicorn PR
    runs-on: arc-runners
    timeout-minutes: 10
    steps:
      - name: Dump github context
        run: echo "${{ toJson(github) }}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Setup yarn
        run: corepack enable

      - name: Get cache
        id: get-cache
        uses: ./.github/actions/get-cache
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          enable-cache: 'node_modules'

      - name: Check unicorn affected
        id: unicorn-affected
        env:
          BaseRef: ${{ github.base_ref }} #The target branch e.g. main (feature/unicorn-app)
          HeadRef: ${{ github.head_ref }} #The branch being merged e.g. (unicorn-pipe-rel3)
        run: |
          echo "Comparing nx affected for $HeadRef using origin/$BaseRef as base branch"
          echo IS_UNICORN=$(node scripts/ci/unicorn-utils.mjs "{\"baseBranch\": \"origin/$BaseRef\", \"mergeBranch\": \"$HeadRef\" }") >> "$GITHUB_OUTPUT"
      - name: Results
        run: |
          echo "Unicorn = ${{ steps.unicorn-affected.outputs.IS_UNICORN }}"

      - name: Find Latest Release Branch
        id: get_latest_release
        run: |
          node scripts/ci/get-last-release.mjs $(git branch -r)

      - run: "echo 'latest release: ${{ steps.get_latest_release.outputs.data }}'"

  cleanup:
    name: Clean up feature deployment
    runs-on: arc-runners
    steps:
      - name: Get git branch
        run: |
          set -euo pipefail
          GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}"
          echo "GIT_BRANCH=$GIT_BRANCH" >> "$GITHUB_ENV"
      - name: Generate deployment branch name
        id: git-branch-deploy
        run: |
          set -euo pipefail
          GIT_BRANCH_DEPLOY="$GIT_BRANCH"
          if [[ ! ("$GIT_BRANCH_DEPLOY" =~ "feature/") ]]; then
            # If event is pull request but branch is not prefixed with feature/
            GIT_BRANCH_DEPLOY=feature/$GIT_BRANCH_DEPLOY
          fi
          # Avoid too long resource names
          GIT_BRANCH_DEPLOY="${GIT_BRANCH_DEPLOY:0:50}"
          echo "GIT_BRANCH_DEPLOY=$GIT_BRANCH_DEPLOY" >> "$GITHUB_ENV"
      - name: Clean up feature
        env:
          SPINNAKER_WEBHOOK_TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_TOKEN }}
          SPINNAKER_URL: https://spinnaker-gate.shared.devland.is
        run: |
          set -euo pipefail
          curl "$SPINNAKER_URL/webhooks/webhook/feature-cleanup" -H "content-type: application/json" --data-binary @- <<BODY
          {
            "token": "$SPINNAKER_WEBHOOK_TOKEN",
            "parameters": {
              "feature_name": "$(echo "$GIT_BRANCH_DEPLOY" | cut -d"/" -f2- | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]' | cut -c1-50)"
            }
          }
          BODY
