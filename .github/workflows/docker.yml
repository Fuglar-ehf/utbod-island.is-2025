name: Docker Build

on:
  workflow_call:
    inputs:
      docker_registry:
        type: string
        required: true
      aws_region:
        required: false
        type: string
        default: eu-west-1
      generated_files:
        required: true
        type: string
        description: 'Path to generated files archive'
      build_chunks:
        required: true
        type: string
        description: 'JSON array of build chunks'
      git_branch:
        required: true
        type: string
        description: 'Git branch name'
      docker_tag:
        required: true
        type: string
        description: 'Docker tag to use'
      node_image_version:
        required: true
        type: string
        description: 'Node image version to use'
      s3_cache_prefix:
        required: true
        type: string
        description: 'S3 cache prefix'
      git_commit_sha:
        required: true
        type: string
        description: 'Git commit SHA'
      server_url:
        required: true
        type: string
        description: 'Server URL'
      nx_parallel:
        required: false
        type: number
        default: 1
        description: 'NX parallel setting'
      nx_max_parallel:
        required: false
        type: number
        description: 'NX max parallel setting'
      playwright_version:
        required: false
        type: string
        description: 'Playwright version'
      affected_all:
        required: false
        type: boolean
        default: false
        description: 'Affected all flag'
      publish:
        required: false
        type: boolean
        default: true
        description: 'Whether to publish docker images'
      disable_chunks:
        required: false
        type: boolean
        default: true
        description: 'Whether to disable chunks'
      max_jobs:
        required: false
        type: number
        default: 3
        description: 'Maximum number of jobs'
    outputs:
      build_status:
        description: 'Status of the build'
        value: ${{ jobs.docker-build.outputs.build_status }}

jobs:
  docker-build:
    runs-on: arc-shared
    permissions:
      contents: read
      packages: write
    timeout-minutes: 45
    if: inputs.build_chunks != ''
    env:
      AFFECTED_ALL: ${{ inputs.affected_all }}
      GIT_BRANCH: ${{ inputs.git_branch }}
      DOCKER_TAG: ${{ inputs.docker_tag }}
      NODE_IMAGE_VERSION: ${{ inputs.node_image_version }}
      PUBLISH: ${{ inputs.publish }}
      DISABLE_CHUNKS: ${{ inputs.disable_chunks }}
      MAX_JOBS: ${{ inputs.max_jobs }}
      NX_PARALLEL: ${{ inputs.nx_parallel }}
      NX_MAX_PARALLEL: ${{ inputs.nx_max_parallel }}
      GIT_COMMIT_SHA: ${{ inputs.git_commit_sha }}
      SERVER_URL: ${{ inputs.server_url }}
      PLAYWRIGHT_VERSION: ${{ inputs.playwright_version }}
      DOCKER_REGISTRY: ${{ inputs.docker_registry }}
      AWS_REGION: ${{ inputs.aws_region }}
      GENERATED_FILES: ${{ inputs.generated_files }}
    strategy:
      fail-fast: true
      matrix:
        chunk: ${{ fromJson(inputs.build_chunks) }}
    outputs:
      build_status: ${{ steps.build_status.outputs.status }}
    steps:
      - name: Gather apps
        id: gather
        run: |
          set -euo pipefail
          AFFECTED_PROJECTS="$(echo '${{ matrix.chunk }}' | jq -r '.projects')"
          DOCKER_TYPE="$(echo '${{ matrix.chunk }}' | jq -r '.docker_type')"
          APP_HOME="$(echo '${{ matrix.chunk }}' | jq -r '.home')"
          APP_DIST_HOME="$(echo '${{ matrix.chunk }}' | jq -r '.dist')"
          echo AFFECTED_PROJECTS="$AFFECTED_PROJECTS" >> "$GITHUB_ENV"
          echo DOCKER_TYPE="$DOCKER_TYPE" >> "$GITHUB_ENV"
          echo APP_HOME="$APP_HOME" >> "$GITHUB_ENV"
          echo APP_DIST_HOME="$APP_DIST_HOME" >> "$GITHUB_ENV"
          echo APP="${AFFECTED_PROJECTS}" >> "$GITHUB_ENV"
          echo OUTPUT_TYPE="${DOCKER_TYPE/docker/output}" >> "${GITHUB_ENV}"

      - name: Login to ECR
        uses: docker/login-action@v3
        id: login-ecr
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set environment variables for build
        run: |
          echo "DOCKER_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        continue-on-error: true

      - uses: actions/checkout@v4
        if: steps.gather.outcome == 'success'

      - name: Restore generated files
        uses: runs-on/cache/restore@v4
        id: restore-generated-files-cache
        with:
          path: |
            ${{ env.GENERATED_FILES }}
          key: generated-files-${{ github.sha }}

      - name: Extract generated files
        run: |
          tar -xzvf ${{ env.GENERATED_FILES }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=${{ env.DOCKER_REGISTRY }}/moby/buildkit:buildx-stable-1
          use: true

      - name: Building docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./scripts/ci/Dockerfile
          push: true
          target: ${{ env.OUTPUT_TYPE }}
          cache-from: type=s3,blobs_prefix=${{ inputs.s3_cache_prefix }}/,manifests_prefix=${{ inputs.s3_cache_prefix }}/,region=${{ env.AWS_REGION }},bucket=${{ secrets.S3_DOCKER_CACHE_BUCKET }}
          build-args: |
            NODE_IMAGE_VERSION=${{ env.NODE_IMAGE_VERSION }}
            GIT_BRANCH=${{ env.GIT_BRANCH }}
            GIT_COMMIT_SHA=${{ env.GIT_COMMIT_SHA }}
            GIT_REPOSITORY_URL=${{ env.SERVER_URL }}
            NX_PARALLEL=${{ env.NX_PARALLEL }}
            NX_MAX_PARALLEL=${{ env.NX_MAX_PARALLEL }}
            NX_TASKS_RUNNER=ci
            PLAYWRIGHT_VERSION=${{ env.PLAYWRIGHT_VERSION }}
            APP=${{ env.APP }}
            APP_HOME=${{ env.APP_HOME }}
            APP_DIST_HOME=${{ env.APP_DIST_HOME }}
          secrets: |
            nx_cloud_access_token=${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.APP }}:${{ env.DOCKER_TAG }}

      - name: Set build status
        id: build_status
        run: echo "status=success" >> $GITHUB_OUTPUT
