name: Helm values

on:
  push:
    paths:
      - '**/infra/**'
      - 'infra/**'
  workflow_dispatch:
  create:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled

jobs:
  pre-checks:
    name: Check if job should run
    runs-on: ubuntu-20.04
    env:
      CREATE_PATTERNS: ^release/,^hotfix/
    outputs:
      GIT_BRANCH: ${{ steps.git-branch.outputs.GIT_BRANCH }}
      GIT_BRANCH_DEPLOY: ${{ steps.git-branch-deploy.outputs.GIT_BRANCH_DEPLOY }}
      PRE_CHECK: ${{ steps.should-run.outputs.PRE_CHECK }}
    steps:
      - name: Get git branch
        id: git-branch
        run: |
          GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}"
          echo "::set-output name=GIT_BRANCH::${GIT_BRANCH}"
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
      - name: Generate deployment branch name
        id: git-branch-deploy
        run: |
          GIT_BRANCH_DEPLOY=$GIT_BRANCH
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            if [[ ! ("$GIT_BRANCH_DEPLOY" =~ "feature/") ]]; then
              # If event is pull request but branch is not prefixed with feature/
              GIT_BRANCH_DEPLOY=feature/$GIT_BRANCH_DEPLOY
            fi
            # Avoid too long resource names
            GIT_BRANCH_DEPLOY=${GIT_BRANCH_DEPLOY:0:50}
          fi
          echo "::set-output name=GIT_BRANCH_DEPLOY::${GIT_BRANCH_DEPLOY}"
          echo "GIT_BRANCH_DEPLOY=$GIT_BRANCH_DEPLOY" >> $GITHUB_ENV
      - name: Check if we want to run workflow
        id: should-run
        env:
          SPINNAKER_WEBHOOK_TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_TOKEN }}
        run: |
          echo "GITHUB_EVENT_NAME is '$GITHUB_EVENT_NAME'"
          if [[ "$GITHUB_EVENT_NAME" == "create" ]]; then
            echo "Workflow was created because of branch creation. Branch name is '$GIT_BRANCH'"

            for pattern in $(echo $CREATE_PATTERNS | sed "s/,/ /g")
            do
                echo "Checking branch against pattern '$pattern'"
                if [[ "$GIT_BRANCH" =~ $pattern ]]; then
                  echo "'$GIT_BRANCH' matches '$pattern', continuing with build"
                  echo "::set-output name=PRE_CHECK::branch-created"
                  exit 0
                fi
            done
            echo "No pattern matches '$GIT_BRANCH', exiting."
            exit 0
          fi
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            if [[ "${{ github.event.action }}" == "labeled" ]]; then
              echo "Action is labeled, using label that was applied: '${{ github.event.label.name }}'"
              deployFeature=$([[ "${{ github.event.label.name }}" == "deploy-feature" ]] && echo true || echo false )
            else
              echo "Action is ${{ github.event.action }}, using labels on PR"
              deployFeature=${{ contains(github.event.pull_request.labels.*.name, 'deploy-feature') }}
            fi
            if [[ "$deployFeature" == "true" ]]; then
              echo "Pull request contains deploy-feature label, continuing with feature deployment"
              echo "::set-output name=PRE_CHECK::feature-deploy"
              exit 0
            fi
            echo "Pull request does not have deploy-feature label, exiting..."
            exit 0
          fi
          echo "::set-output name=PRE_CHECK::push"

  prepare:
    runs-on: ubuntu-20.04
    outputs:
      CHARTS: ${{ steps.gather_charts.outputs.CHARTS }}
      DOCKER_TAG: ${{ steps.docker_tags.outputs.DOCKER_TAG }}
    steps:
      - uses: actions/checkout@v2
      - name: Gather charts
        id: gather_charts
        run: echo "::set-output name=CHARTS::$(python -c 'import os, json; print(json.dumps([os.path.splitext(f)[0] for f in os.listdir("infra/src/uber-charts/")]))')"
      - name: Generate docker image tag
        id: docker_tags
        run: |
          export DOCKER_BRANCH_TAG=$(echo ${GIT_BRANCH} | tr "/." "-" )
          SHA="${{ github.event.pull_request.head.sha }}"
          echo "SHA='$SHA' retrieved from event"
          if [[ "$SHA" == "" ]]; then
            SHA=$GITHUB_SHA
            echo "SHA='$SHA', retrived from action environment"
          fi
          echo "Using SHA='$SHA' as docker tag sha"
          export DOCKER_TAG=${GITHUB_RUN_NUMBER}_${DOCKER_BRANCH_TAG}_${SHA:0:7}
          echo "Docker tag will be ${DOCKER_TAG}"
          echo "::set-output name=DOCKER_TAG::${DOCKER_TAG}"
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
  test-and-build:
    runs-on: ubuntu-20.04
    needs:
      - prepare
      - pre-checks

    timeout-minutes: 5
    env:
      DOCKER_TAG: needs.prepare.outputs.CHARTS
    strategy:
      fail-fast: false
      matrix:
        chart: ${{ fromJson(needs.prepare.outputs.CHARTS) }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache for NodeJS dependencies
        id: node-modules
        uses: actions/cache@v2
        with:
          path: infra/node_modules
          key: ${{ runner.os }}-${{ hashFiles('infra/yarn.lock') }}-infra

      - name: Building NodeJS dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        working-directory: infra
        run: yarn install --frozen-lock

      - name: Run unit tests
        run: ./infra/scripts/ci/test-unit.sh

      - name: Check chart values are up-to-date
        run: ./infra/scripts/ci/diff-chart-values.sh ${{matrix.chart}}

      - name: Docker build image
        working-directory: infra
        if: needs.pre-checks.outputs.PRE_CHECK
        run: |
          ./scripts/build-docker-container.sh $DOCKER_TAG
          FEATURE_NAME=$(echo "$GIT_BRANCH_DEPLOY" | cut -d"/" -f2- | tr -cd '[:alnum:].-' | tr '[:upper:]' '[:lower:]' | cut -c1-50)
          echo "COMMENT=$(docker run --rm -it 821090935708.dkr.ecr.eu-west-1.amazonaws.com/helm-config:$DOCKER_TAG ingress-comment --images=api,web --chart=islandis --feature=$FEATURE_NAME)" >> $GITHUB_ENV
        env:
          PUBLISH: 'true'

      - name: Comment on PR
        if: steps.changes.outputs.changed == 1
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { COMMENT } = process.env
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${COMMENT}`
            })

  failure-notification:
    runs-on: ubuntu-20.04
    if: failure()
    needs:
      - prepare
      - test
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          icon_emoji: ':broken_heart:'
          fields: repo,message,commit,author,action,eventName,ref,workflow,took # selectable (default: repo,message)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
