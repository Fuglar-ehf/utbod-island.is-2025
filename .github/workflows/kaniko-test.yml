name: ðŸ§ª Kaniko build with dynamic Dockerfile

on:
  pull_request:

concurrency:
  # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
  group: kaniko-${{ github.head_ref || github.run_id }}
  cancel-in-progress: false

jobs:
  build:
    env:
      KANIKO_CACHE_ARGS: '--cache=true --cache-copy-layers=true --cache-ttl=24h'
    runs-on: arc-shared
    # Let the container hooks handle the container creation
    # The hooks will create a container with the image you specify
    container:
      image: gcr.io/kaniko-project/executor:v1.20.0-debug
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and Push Image to GHCR with kaniko
        run: |
          cat <<EOF > /kaniko/.docker/config.json
          {
            "auths": {
              "ghcr.io": {
                "auth": "$(echo -n "$GIT_USERNAME:$GIT_PASSWORD" | base64 -w0)"
              }
            }
          }
          EOF

          /kaniko/executor --dockerfile="./hack/Dockerfile" \\
            --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}"  \\
            --destination="$GH_REGISTRY/$IMAGE_NAME:$(echo ${GITHUB_SHA} | head  -c 7)" \\
            ${{ env.KANIKO_CACHE_ARGS }} \\
            --push-retry 5
        env:
          GIT_USERNAME: ${{ github.actor }}
          GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          GH_REGISTRY: 'ghcr.io'
          IMAGE_NAME: '${{ github.repository }}/kaniko-build'
