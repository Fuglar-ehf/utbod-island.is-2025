name: Validate code in the merge queue (post merge)

on:
  workflow_dispatch: {}
  pull_request:
    types:
      - synchronize
      - opened
defaults:
  run:
    shell: bash -euxo pipefail {0}

jobs:
  prepare:
    runs-on: arc-runners
    outputs:
      TEST_CHUNKS: ${{ steps.test_projects.outputs.CHUNKS }}
      BASE_SHA: ${{ steps.branch_info.outputs.BASE_SHA }}
      HEAD_SHA: ${{ steps.branch_info.outputs.HEAD_SHA }}
      CACHE_KEYS: ${{ steps.get_cache.outputs.keys }}
    steps:
      # - name: Debug
      #   env:
      #     GIT_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GIT_CONTEXT"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get cache
        id: get_cache
        uses: ./.github/actions/get-cache
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          enable-cache: 'node_modules,cypress,generated-files'

      - uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Setup yarn
        run: corepack enable

      - name: Gather branch info
        id: branch_info
        run: |
          echo "BASE_SHA=${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}" >> $GITHUB_ENV

        # CHUNKS=$(yarn nx show projects --withTarget="test" --affected --base "$BASE_SHA" --head "$HEAD_SHA" --json | jq -r 'join(", ")')
      - name: Prepare test targets
        id: test_projects
        run: |
          export BASE="$BASE_SHA"
          export HEAD="$HEAD_SHA"
          CHUNKS="$(./scripts/ci/generate-chunks.sh test)"
          echo "CHUNKS={\"projects\":$CHUNKS}" >> "$GITHUB_OUTPUT"

  tests:
    needs: prepare
    if: needs.prepare.outputs.TEST_CHUNKS
    runs-on: arc-runners
    timeout-minutes: 45
    env:
      AFFECTED_PROJECTS: ${{ matrix.projects }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.TEST_CHUNKS) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Setup yarn
        run: corepack enable

      - name: Get cache
        id: get-cache
        uses: ./.github/actions/get-cache
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          keys: ${{ needs.prepare.outputs.CACHE_KEYS }}
          enable-cache: 'node_modules,cypress,generated-files'

      - uses: ./.github/actions/unit-test
        with:
          dd-api-key: '${{ secrets.DD_API_KEY }}'
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          docker-registry: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/

  # success:
  #   runs-on: ec2-runners
  #   needs: tests
  #   container:
  #     image: public.ecr.aws/m3u4c4h9/island-is/actions-runner-public:latest
  #   steps:
  #     - name: Dump GitHub context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #       run: |
  #         echo "$GITHUB_CONTEXT"
  #     - name: Announce success
  #       run: echo "Build is successful"

  # codeowners-check:
  #   name: Lint CODEOWNERS
  #   runs-on: ec2-runners
  #   env:
  #     CHECK: 'false'
  #   container:
  #     image: public.ecr.aws/m3u4c4h9/island-is/actions-runner-public:latest

  #   steps:
  #     - name: Codeowners validation
  #       run: |
  #         exit 0
