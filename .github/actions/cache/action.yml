# You can use this composite action if you want retry functionality with your
# caching action. Because composite actions currently do not have the
# continue-on-error feature we need a second step to check the output of the
# cache action to determine if it ran successfully.
#
# ** Example **
#
# jobs:
#   my-job:
#     steps:
#     - name: Cache node modules
#       id: node-modules
#       continue-on-error: true
#       uses: ./.github/actions/cache
#       with:
#         path: node_modules
#         key: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}-yarn

name: 'Cache'
description: 'Cache with retry'
inputs:
  # From https://github.com/actions/cache?tab=readme-ov-file#inputs
  key:
    description: 'An explicit key for a cache entry. See creating a cache key.'
    required: false
  path:
    description: 'A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.'
    required: false
  restore-keys:
    description: 'An ordered list of prefix-matched keys to use for restoring stale cache if no cache hit occurred for key.'
    required: false
  enableCrossOsArchive:
    description: 'An optional boolean when enabled, allows Windows runners to save or restore caches that can be restored or saved respectively on other platforms'
    required: false
    default: 'false'
  fail-on-cache-miss:
    description: 'Fail the workflow if cache entry is not found'
    required: false
    default: 'false'
  lookup-only:
    description: 'If true, only checks if cache entry exists and skips download. Does not change save cache behavior'
    required: false
    default: 'false'
  # From https://github.com/island-is/cache?tab=readme-ov-file#inputs
  retries:
    description: 'Number of retries'
    required: false
    default: '1'
  retry-interval:
    description: 'Time between retries'
    required: false
    default: '10'
  cache-url:
    description: 'URL to your cache'
    required: false
    default: https://cache.dev01.devland.is/

outputs:
  cache-hit:
    description: 'Did the cache key match and restored the cache?'
    value: ${{ steps.cache-attempt.outputs.cache-hit }}
  result:
    description: 'Result of the action'
    value: ${{ steps.cache-attempt.outputs.result }}
  success:
    description: 'Did the action succeed?'
    value: ${{ steps.cache-attempt.outputs.success }}

runs:
  using: 'composite'
  steps:
    - name: Simulate cache failure
      shell: bash
      run: exit 1

    - name: Exit if no retries
      if: inputs.retries < 0
      shell: bash
      run: exit 1

    - name: Attempting to cache (${{ inputs.retries }} retries left)
      id: cache-attempt
      # uses: actions/cache@v3 # Good for local debugging with act ❤️
      uses: island-is/cache@v0.3
      with:
        path: ${{ inputs.path }}
        key: ${{ inputs.key }}
        cache-url: ${{ inputs.cache-url }}
        fail-on-missing: ${{ inputs.fail-on-cache-miss }}
        lookup-only: ${{ inputs.lookup-only }}
        enable-cross-os-archive: ${{ inputs.enableCrossOsArchive }}

    - name: Fail on cache miss
      if: inputs.fail-on-cache-miss == 'true' && steps.cache-attempt.outputs.success != 'true'
      shell: bash
      run: exit 1

    - name: Exit successfully if cache is hit
      if: ${{ steps.cache-attempt.outputs.cache-hit == 'true' }}
      shell: bash
      run: exit 0

    - name: Sleep for ${{ inputs.retry-interval }} seconds
      if: ${{ inputs.retries > 0 && steps.cache-attempt.outputs.success != 'true' }}
      shell: bash
      run: sleep ${{ inputs.retry-interval }}

    - name: Calculate retries left
      shell: bash
      id: calc-retries
      run: echo "retries-left=$(( ${{ inputs.retries }} - 1 ))" >> "$GITHUB_OUTPUT"

    - name: Recursively loop caching
      id: recurse-loop
      if: ${{ steps.cache-attempt.outputs.success != 'true' }}
      uses: ./.github/actions/cache
      with:
        path: ${{ inputs.path }}
        key: ${{ inputs.key }}
        retries: ${{ steps.calc-retries.outputs.retries-left }}
        retry-interval: ${{ inputs.retry-interval }}
        cache-url: ${{ inputs.cache-url }}

    - name: Exit if recurse failed
      if: ${{ steps.recurse-loop.outputs.success != 'true' }}
      shell: bash
      run: exit 1

      # From https://github.com/marketplace/actions/slack-notify#environment-variables
      # SLACK_CHANNEL: general
      # SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
      # SLACK_ICON: https://github.com/rtCamp.png?size=48
      # SLACK_MESSAGE: 'Post Content :rocket:'
      # SLACK_TITLE: Post Title
      # SLACK_USERNAME: rtCamp
      # SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      # 👆 Available environment variables/concfig
    - name: Slack Notify defaults
      if: ${{ !cancelled() }}
      env:
        SLACK_CHANNEL: infra-updates
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/island-is.png?size=48
        SLACK_MESSAGE: ''
        SLACK_TITLE: Github Actions cache check
        SLACK_USERNAME: Digital Iceland cache bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      shell: bash
      run: |
        echo "SLACK_CHANNEL=${SLACK_CHANNEL}"
        echo "SLACK_COLOR=${SLACK_COLOR}"
        echo "SLACK_ICON=${SLACK_ICON}"
        echo "SLACK_MESSAGE=${SLACK_MESSAGE}"
        echo "SLACK_TITLE=${SLACK_TITLE}"
        echo "SLACK_USERNAME=${SLACK_USERNAME}"
        echo "SLACK_WEBHOOK=${SLACK_WEBHOOK}"

    - name: Notify on failure
      if: ${{ !cancelled() && success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#00ee66'
        SLACK_MESSAGE: 'Cache success'

    - name: Notify on failure
      if: ${{ !cancelled() && !success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_USERNAME: Github Actions cache bot
        SLACK_CHANNEL: infra-updates
        SLACK_COLOR: '#ff0000'
        SLACK_MESSAGE: 'Cache failed'
