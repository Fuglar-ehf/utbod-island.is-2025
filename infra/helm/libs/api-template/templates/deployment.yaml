{{- if .Values.enabled }}
{{- $fullName := include "api-template.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api-template.fullname" . }}
  {{- if .Values.namespace }}
  namespace: {{ .Values.namespace }}
  {{- end }}
  labels:
    {{- include "api-template.labels" . | nindent 4 }}
    tags.datadoghq.com/env: {{ .Values.global.env.name }}
    tags.datadoghq.com/service: {{ include "api-template.name" . }}
    tags.datadoghq.com/version: {{ .Values.image.tag | default .Values.global.image.tag }}
spec:
  replicas: {{ .Values.replicaCount.default }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "api-template.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "api-template.selectorLabels" . | nindent 8 }}
        tags.datadoghq.com/env: {{ .Values.global.env.name }}
        tags.datadoghq.com/service: {{ include "api-template.name" . }}
        tags.datadoghq.com/version: {{ .Values.image.tag | default .Values.global.image.tag }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: {{ add1 .Values.service.targetPort  | quote }} # The metrics port is +1 on the HTTP service port
        ad.datadoghq.com/{{ .Chart.Name }}.logs: >- 
          [{
            "log_processing_rules": [{
              "type": "mask_sequences", 
              "name": "mask_national_ids", 
              "replace_placeholder": "--MASKED--", 
              "pattern" : "\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b"
            }]
          }]
        {{- range .Values.initContainer.containers }}
        ad.datadoghq.com/{{ .name | default "migration" }}.logs: >- 
          [{
            "log_processing_rules": [{
              "type": "mask_sequences", 
              "name": "mask_national_ids", 
              "replace_placeholder": "--MASKED--", 
              "pattern" : "\\b(?:[89]\\d{3}|(?:[012]\\d|3[01])(?:0\\d|1[012]))\\d\\d-?\\d{4}\\b"
            }]
          }]
        {{- end }}

        {{- if .Values.annotations }}
        {{- toYaml .Values.annotations | nindent 8 }}
        {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "api-template.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      {{- if .Values.initContainer.containers }}
      initContainers:
        {{- range .Values.initContainer.containers }}
        - name: {{ .name | default "migration" }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Values.global.image.tag }}"
          command: {{ .command | toJson }}
          args: {{ .args | toJson }}
          env:
            {{- range $key, $value := $.Values.global.initContainer.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := $.Values.initContainer.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := $.Values.initContainer.secrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}-init-container
                  key: {{ $key }}
            {{- end }}
            - name: APP_VERSION
              value: {{ $.Values.image.tag | default $.Values.global.image.tag }}
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_APM_REPLACE_TAGS
              value: '[ 
                {
                  "name": "*",
                  "pattern": "\b(?:[89]\d{3}|(?:[012]\d|3[01])(?:0\d|1[012]))\d\d-?\d{4}\b",
                  "repl": "--MASKED--"
                }]'
          resources:
            {{- toYaml .resources | default $.Values.resources | nindent 12 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command: {{ .Values.command | toJson }}
          {{- end }}
          {{- if .Values.args }}
          args: {{ .Values.args | toJson }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.liveness.path }}
              port: {{ .Values.healthCheck.port | default .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.healthCheck.liveness.initialDelaySeconds }}
            timeoutSeconds:  {{ .Values.healthCheck.liveness.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.readiness.path }}
              port: {{ .Values.healthCheck.port | default .Values.service.targetPort }}
            initialDelaySeconds: {{ .Values.healthCheck.readiness.initialDelaySeconds }}
            timeoutSeconds:  {{ .Values.healthCheck.readiness.timeoutSeconds }}
          env:
            {{- range $key, $value := .Values.global.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.secrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}
                  key: {{ $key }}
            {{- end }}
            - name: APP_VERSION
              value: {{ .Values.image.tag | default .Values.global.image.tag }}
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_RUNTIME_METRICS_ENABLED
              value: "true"
            - name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              value: "true"
            - name: DD_APM_REPLACE_TAGS
              value: '[ 
                {
                  "name": "*",
                  "pattern": "\b(?:[89]\d{3}|(?:[012]\d|3[01])(?:0\d|1[012]))\d\d-?\d{4}\b",
                  "repl": "--MASKED--"
                }]'
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if or (not (empty .Values.files)) (not (empty .Values.pvcs))}}
          volumeMounts:
          {{- end}}
          {{- if not (empty .Values.pvcs) }}
          {{- range .Values.pvcs}}
            - mountPath: {{ .mountPath }}
              name: {{ .name }}
          {{- end}}
          {{- end }}
          {{- if not (empty .Values.files) }}
            - name: config-volume
              mountPath: /etc/config
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if or (not (empty .Values.files)) (not (empty .Values.pvcs))}}
      volumes:
    {{- end }}
    {{- if not (empty .Values.files) }}
        - name: config-volume
          configMap:
            name: {{ include "api-template.name" . }}
    {{- end}}
        {{- if not (empty .Values.pvcs) }}
        {{- range .Values.pvcs}}
        - name: {{.name}}
          persistentVolumeClaim:
            claimName: {{.name}}
        {{- end }}
    {{- end }}
  {{- end }}