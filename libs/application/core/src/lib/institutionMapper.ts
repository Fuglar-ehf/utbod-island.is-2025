import { ApplicationTypes } from '../types/ApplicationTypes'
import { FormatMessage } from '../types/external'
import { coreInstitutionMessages } from './messages'

export const getInstitutionMapper = (formatMessage: FormatMessage) => {
  const institutionMapper = new Map<string, string>()

  institutionMapper.set(
    ApplicationTypes.EXAMPLE,
    formatMessage(coreInstitutionMessages[ApplicationTypes.EXAMPLE]),
  )
  institutionMapper.set(
    ApplicationTypes.PASSPORT,
    formatMessage(coreInstitutionMessages[ApplicationTypes.PASSPORT]),
  )
  institutionMapper.set(
    ApplicationTypes.DRIVING_LICENSE,
    formatMessage(coreInstitutionMessages[ApplicationTypes.DRIVING_LICENSE]),
  )
  institutionMapper.set(
    ApplicationTypes.DRIVING_ASSESSMENT_APPROVAL,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.DRIVING_ASSESSMENT_APPROVAL],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.PARENTAL_LEAVE,
    formatMessage(coreInstitutionMessages[ApplicationTypes.PARENTAL_LEAVE]),
  )
  institutionMapper.set(
    ApplicationTypes.DOCUMENT_PROVIDER_ONBOARDING,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.DOCUMENT_PROVIDER_ONBOARDING],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.HEALTH_INSURANCE,
    formatMessage(coreInstitutionMessages[ApplicationTypes.HEALTH_INSURANCE]),
  )
  institutionMapper.set(
    ApplicationTypes.CHILDREN_RESIDENCE_CHANGE,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.CHILDREN_RESIDENCE_CHANGE],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.DATA_PROTECTION_AUTHORITY_COMPLAINT,
    formatMessage(
      coreInstitutionMessages[
        ApplicationTypes.DATA_PROTECTION_AUTHORITY_COMPLAINT
      ],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.LOGIN_SERVICE,
    formatMessage(coreInstitutionMessages[ApplicationTypes.LOGIN_SERVICE]),
  )
  institutionMapper.set(
    ApplicationTypes.INSTITUTION_COLLABORATION,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.INSTITUTION_COLLABORATION],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.FUNDING_GOVERNMENT_PROJECTS,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.FUNDING_GOVERNMENT_PROJECTS],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.PUBLIC_DEBT_PAYMENT_PLAN,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.PUBLIC_DEBT_PAYMENT_PLAN],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.COMPLAINTS_TO_ALTHINGI_OMBUDSMAN,
    formatMessage(
      coreInstitutionMessages[
        ApplicationTypes.COMPLAINTS_TO_ALTHINGI_OMBUDSMAN
      ],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.ACCIDENT_NOTIFICATION,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.ACCIDENT_NOTIFICATION],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.GENERAL_PETITION,
    formatMessage(coreInstitutionMessages[ApplicationTypes.GENERAL_PETITION]),
  )
  institutionMapper.set(
    ApplicationTypes.GENERAL_FISHING_LICENSE,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.GENERAL_FISHING_LICENSE],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.P_SIGN,
    formatMessage(coreInstitutionMessages[ApplicationTypes.P_SIGN]),
  )
  institutionMapper.set(
    ApplicationTypes.CRIMINAL_RECORD,
    formatMessage(coreInstitutionMessages[ApplicationTypes.CRIMINAL_RECORD]),
  )
  institutionMapper.set(
    ApplicationTypes.FINANCIAL_AID,
    formatMessage(coreInstitutionMessages[ApplicationTypes.FINANCIAL_AID]),
  )
  institutionMapper.set(
    ApplicationTypes.DRIVING_INSTRUCTOR_REGISTRATIONS,
    formatMessage(
      coreInstitutionMessages[
        ApplicationTypes.DRIVING_INSTRUCTOR_REGISTRATIONS
      ],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.EXAMPLE_PAYMENT,
    formatMessage(coreInstitutionMessages[ApplicationTypes.EXAMPLE_PAYMENT]),
  )
  institutionMapper.set(
    ApplicationTypes.DRIVING_SCHOOL_CONFIRMATION,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.DRIVING_SCHOOL_CONFIRMATION],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.MORTGAGE_CERTIFICATE,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.MORTGAGE_CERTIFICATE],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.NO_DEBT_CERTIFICATE,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.NO_DEBT_CERTIFICATE],
    ),
  )
  institutionMapper.set(
    ApplicationTypes.FINANCIAL_STATEMENTS_INAO,
    formatMessage(
      coreInstitutionMessages[ApplicationTypes.FINANCIAL_STATEMENTS_INAO],
    ),
  )

  return institutionMapper
}
