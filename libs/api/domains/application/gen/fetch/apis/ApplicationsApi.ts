/* tslint:disable */
/* eslint-disable */
/**
 * Application backend
 * This is provided as a reference to implement other backends.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddAttachmentDto,
    AddAttachmentDtoFromJSON,
    AddAttachmentDtoToJSON,
    ApplicationResponseDto,
    ApplicationResponseDtoFromJSON,
    ApplicationResponseDtoToJSON,
    CreateApplicationDto,
    CreateApplicationDtoFromJSON,
    CreateApplicationDtoToJSON,
    DeleteAttachmentDto,
    DeleteAttachmentDtoFromJSON,
    DeleteAttachmentDtoToJSON,
    PopulateExternalDataDto,
    PopulateExternalDataDtoFromJSON,
    PopulateExternalDataDtoToJSON,
    UpdateApplicationDto,
    UpdateApplicationDtoFromJSON,
    UpdateApplicationDtoToJSON,
    UpdateApplicationStateDto,
    UpdateApplicationStateDtoFromJSON,
    UpdateApplicationStateDtoToJSON,
} from '../models';

export interface ApplicationControllerAddAttachmentRequest {
    id: string;
    addAttachmentDto: AddAttachmentDto;
}

export interface ApplicationControllerCreateRequest {
    createApplicationDto: CreateApplicationDto;
}

export interface ApplicationControllerDeleteAttachmentRequest {
    id: string;
    deleteAttachmentDto: DeleteAttachmentDto;
}

export interface ApplicationControllerFindAllRequest {
    typeId: string;
}

export interface ApplicationControllerFindApplicantApplicationsRequest {
    nationalRegistryId: string;
    typeId?: string;
}

export interface ApplicationControllerFindAssigneeApplicationsRequest {
    nationalRegistryId: string;
    typeId?: string;
}

export interface ApplicationControllerFindOneRequest {
    id: string;
}

export interface ApplicationControllerSubmitApplicationRequest {
    id: string;
    updateApplicationStateDto: UpdateApplicationStateDto;
}

export interface ApplicationControllerUpdateRequest {
    id: string;
    updateApplicationDto: UpdateApplicationDto;
}

export interface ApplicationControllerUpdateExternalDataRequest {
    id: string;
    populateExternalDataDto: PopulateExternalDataDto;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     */
    async applicationControllerAddAttachmentRaw(requestParameters: ApplicationControllerAddAttachmentRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerAddAttachment.');
        }

        if (requestParameters.addAttachmentDto === null || requestParameters.addAttachmentDto === undefined) {
            throw new runtime.RequiredError('addAttachmentDto','Required parameter requestParameters.addAttachmentDto was null or undefined when calling applicationControllerAddAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddAttachmentDtoToJSON(requestParameters.addAttachmentDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerAddAttachment(requestParameters: ApplicationControllerAddAttachmentRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerAddAttachmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerCreateRaw(requestParameters: ApplicationControllerCreateRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.createApplicationDto === null || requestParameters.createApplicationDto === undefined) {
            throw new runtime.RequiredError('createApplicationDto','Required parameter requestParameters.createApplicationDto was null or undefined when calling applicationControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationDtoToJSON(requestParameters.createApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerCreate(requestParameters: ApplicationControllerCreateRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerDeleteAttachmentRaw(requestParameters: ApplicationControllerDeleteAttachmentRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerDeleteAttachment.');
        }

        if (requestParameters.deleteAttachmentDto === null || requestParameters.deleteAttachmentDto === undefined) {
            throw new runtime.RequiredError('deleteAttachmentDto','Required parameter requestParameters.deleteAttachmentDto was null or undefined when calling applicationControllerDeleteAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAttachmentDtoToJSON(requestParameters.deleteAttachmentDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerDeleteAttachment(requestParameters: ApplicationControllerDeleteAttachmentRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerDeleteAttachmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindAllRaw(requestParameters: ApplicationControllerFindAllRequest): Promise<runtime.ApiResponse<Array<ApplicationResponseDto>>> {
        if (requestParameters.typeId === null || requestParameters.typeId === undefined) {
            throw new runtime.RequiredError('typeId','Required parameter requestParameters.typeId was null or undefined when calling applicationControllerFindAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationResponseDtoFromJSON));
    }

    /**
     */
    async applicationControllerFindAll(requestParameters: ApplicationControllerFindAllRequest): Promise<Array<ApplicationResponseDto>> {
        const response = await this.applicationControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindApplicantApplicationsRaw(requestParameters: ApplicationControllerFindApplicantApplicationsRequest): Promise<runtime.ApiResponse<Array<ApplicationResponseDto>>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling applicationControllerFindApplicantApplications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applicants/{nationalRegistryId}/applications`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationResponseDtoFromJSON));
    }

    /**
     */
    async applicationControllerFindApplicantApplications(requestParameters: ApplicationControllerFindApplicantApplicationsRequest): Promise<Array<ApplicationResponseDto>> {
        const response = await this.applicationControllerFindApplicantApplicationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindAssigneeApplicationsRaw(requestParameters: ApplicationControllerFindAssigneeApplicationsRequest): Promise<runtime.ApiResponse<Array<ApplicationResponseDto>>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling applicationControllerFindAssigneeApplications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assignees/{nationalRegistryId}/applications`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationResponseDtoFromJSON));
    }

    /**
     */
    async applicationControllerFindAssigneeApplications(requestParameters: ApplicationControllerFindAssigneeApplicationsRequest): Promise<Array<ApplicationResponseDto>> {
        const response = await this.applicationControllerFindAssigneeApplicationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindOneRaw(requestParameters: ApplicationControllerFindOneRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerFindOne(requestParameters: ApplicationControllerFindOneRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerSubmitApplicationRaw(requestParameters: ApplicationControllerSubmitApplicationRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerSubmitApplication.');
        }

        if (requestParameters.updateApplicationStateDto === null || requestParameters.updateApplicationStateDto === undefined) {
            throw new runtime.RequiredError('updateApplicationStateDto','Required parameter requestParameters.updateApplicationStateDto was null or undefined when calling applicationControllerSubmitApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}/submit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationStateDtoToJSON(requestParameters.updateApplicationStateDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerSubmitApplication(requestParameters: ApplicationControllerSubmitApplicationRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerSubmitApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerUpdateRaw(requestParameters: ApplicationControllerUpdateRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerUpdate.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling applicationControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerUpdate(requestParameters: ApplicationControllerUpdateRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerUpdateExternalDataRaw(requestParameters: ApplicationControllerUpdateExternalDataRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerUpdateExternalData.');
        }

        if (requestParameters.populateExternalDataDto === null || requestParameters.populateExternalDataDto === undefined) {
            throw new runtime.RequiredError('populateExternalDataDto','Required parameter requestParameters.populateExternalDataDto was null or undefined when calling applicationControllerUpdateExternalData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}/externalData`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PopulateExternalDataDtoToJSON(requestParameters.populateExternalDataDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerUpdateExternalData(requestParameters: ApplicationControllerUpdateExternalDataRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerUpdateExternalDataRaw(requestParameters);
        return await response.value();
    }

}
