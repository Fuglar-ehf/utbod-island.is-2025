input ArticleInput {
  _id: ID
  title: String
  slug: String
  content: String
}

input CategoryInput {
  id: ID
  slug: String
}

type ContentArticle {
  _id: ID
  title: String
  slug: String
}

type ContentCategory {
  _id: ID
  title: String
  slug: String
}

type ContentItem {
  _id: String
  title: String
  content: String
  tag: [String]
  category: String
  content_blob: String
  content_id: String
  content_type: String
  date: String
  image: String
  imageText: String
  lang: String
  slug: String
}

type HelloWorld {
  message: String!
}

input HelloWorldInput {
  name: String = "World"
}

enum Language {
  is
  en
}

type Mutation {
  root: String
}

type Namespace {
  namespace: String!
  fields: String!
}

type Query {
  article(input: ArticleInput): ContentItem
  category(input: CategoryInput): ContentCategory
  getSearchResults(query: SearcherInput, language: Language): SearchResult!
  helloWorld(input: HelloWorldInput): HelloWorld!
  root: String
}

input SearcherInput {
  queryString: String
}

type SearchResult {
  total: Int
  items: [ContentItem!]
}
